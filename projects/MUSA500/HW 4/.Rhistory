?setup_twitter_oauth
getOption("httr_oauth_cache")
httr_oauth_cache = TRUE
getOption("httr_oauth_cache")
delete httr_oauth_cache
options(httr_oauth_cache=T)
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
install.packages("devtools")
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
install.packages("Rtools")
library(devtools)
install.packages("Rtools")
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
SessionInfo()
sessioninfo()
sessionInfo()
install.packages("installr")
updateR()
library(installr)
library(installr)
updateR()
library(installr)
updateR()
update(R)
install.packages("tm")
install.packages("RTextTools")
install.packages("topicmodels")
install.packages("twitteR")
install.packages("get_oauth_sig")
install.packages("base64enc")
install.packages("curl")
install.packages("devtools")
install.packages("Rtools")
install.packages("installr")
install.packages("installr")
library(tm)
library(RTextTools)
library(topicmodels)
library(twitteR)
library(base64enc)
library(curl)
library(devtools)
library(installr)
updateR()
sessionInfo()
install.packages("tm")
install.packages("RTextTools")
install.packages("topicmodels")
install.packages("twitteR")
install.packages("get_oauth_sig")
install.packages("base64enc")
install.packages("curl")
install.packages("devtools")
install.packages("Rtools")
library(tm)
library(RTextTools)
library(topicmodels)
library(twitteR)
library(base64enc)
library(curl)
library(devtools)
options(httr_oauth_cache=T)
consumerKey <- "0cR94DC6w8UnurX6sMVJR8MIv"
consumerSecret <- "j4SJDvpRNhZ9dWhfCaR9MBq6XLxVnw04xUIvCEp7rkq2SUERNI"
accessToken <- "529074516-c88aEO4qGQ2nYuGvf4s2kp88bA9fYQkrypcF3pGL"
accessSecret <- "RLq5KnuQ34QIRLs0FQsKfeoJLMuFohXJpBrIq6RM52Uel"
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
infoSession()
sessionInfo()
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
options(httr_oauth_cache=T)
consumerKey <- "0cR94DC6w8UnurX6sMVJR8MIv"
consumerSecret <- "j4SJDvpRNhZ9dWhfCaR9MBq6XLxVnw04xUIvCEp7rkq2SUERNI"
accessToken <- "529074516-c88aEO4qGQ2nYuGvf4s2kp88bA9fYQkrypcF3pGL"
accessSecret <- "RLq5KnuQ34QIRLs0FQsKfeoJLMuFohXJpBrIq6RM52Uel"
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
twitter_feed <- searchTwitter('@cnn', n=150);
twitter_feed <- searchTwitter('@cnn', n=150)
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(httr)
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
library(curl)
library(tm)
library(RTextTools)
library(topicmodels)
library(twitteR)
library(base64enc)
library(httr)
library(curl)
library(devtools)
library(installr)
install.packages("Rtools")
install.packages("rtools")
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
install.packages(c("devtools", "rjson", "bit64", "httr"))
install.packages(c("devtools", "rjson", "bit64", "httr"))
devtools::install_github("hadley/httr")
find_rtools()
install.packages("Rtools")
library(Rtools)
install.packages("tm")
install.packages("tm_map")
install.packages("RTextTools")
install.packages("topicmodels")
install.packages("twitteR", dependencies=T)
install.packages("ROAuth")
install.packages("get_oauth_sig")
install.packages("base64enc")
install.packages("httr")
install.packages("httpuv")
install.packages("curl")
install.packages("devtools")
install.packages("installr")
install.packages("Rtools")
install.packages("SnowballC")
install.packages("qdap")
install.packages("qdapDictionaries")
install.packages("dplyr")
install.packages("RColorBrewer")
install.packages("ggplot2")
install.packages("scales")
install.packages("Rgraphviz")
install.packages("wordcloud")
library(tm)
library(tm_map)
library(RTextTools)
library(topicmodels)
library(twitteR)
library(base64enc)
library(httr)
library(httpuv)
library(curl)
library(devtools)
library(installr)
library(ROAuth)
library(RCurl)
find_rtools()
library(tm)
library(SnowballC)
library(qdap)
library(qdapDictionaries)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(scales)
library(Rgraphviz)
library(wordcloud)
library(SnowballC)
devtools::install_github("hadley/httr")
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
devtools::install_github("hadley/httr")
# 1. Find OAuth settings for twitter:
#    https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
#    Make sure to set callback url to "http://127.0.0.1:1410"
#    Replace key and secret below
consumerKey <- "0cR94DC6w8UnurX6sMVJR8MIv"
consumerSecret <- "j4SJDvpRNhZ9dWhfCaR9MBq6XLxVnw04xUIvCEp7rkq2SUERNI"
accessToken <- "529074516-c88aEO4qGQ2nYuGvf4s2kp88bA9fYQkrypcF3pGL"
accessSecret <- "RLq5KnuQ34QIRLs0FQsKfeoJLMuFohXJpBrIq6RM52Uel"
setup_twitter_oauth(consumerKey,consumerSecret,accessToken,accessSecret)
twitter_feed <- searchTwitter("tishabav", lang="en", n=10000);
install.packages("tm")
install.packages("tm_map")
install.packages("RTextTools")
install.packages("topicmodels")
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
install.packages("twitteR", dependencies=T)
install.packages("ROAuth")
install.packages("get_oauth_sig")
install.packages("base64enc")
install.packages("httr")
install.packages("httr")
install.packages("httpuv")
install.packages("curl")
install.packages("devtools")
install.packages("devtools")
install.packages("Rtools")
install.packages("SnowballC")
install.packages("qdap")
install.packages("qdapDictionaries")
install.packages("dplyr")
install.packages("RColorBrewer")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("Rgraphviz")
install.packages("wordcloud")
library(tm)
library(tm_map)
install.packages("tm_map")
library(RTextTools)
library(topicmodels)
library(twitteR)
library(base64enc)
library(httr)
library(httpuv)
library(curl)
library(devtools)
library(installr)
library(ROAuth)
library(RCurl)
find_rtools()
library(tm)
library(SnowballC)
library(qdap)
library(qdapDictionaries)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(scales)
library(Rgraphviz)
library(wordcloud)
library(SnowballC)
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
devtools::install_github("hadley/httr")
# 1. Find OAuth settings for twitter:
#    https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
consumerKey <- "0cR94DC6w8UnurX6sMVJR8MIv"
consumerSecret <- "j4SJDvpRNhZ9dWhfCaR9MBq6XLxVnw04xUIvCEp7rkq2SUERNI"
accessToken <- "529074516-c88aEO4qGQ2nYuGvf4s2kp88bA9fYQkrypcF3pGL"
accessSecret <- "RLq5KnuQ34QIRLs0FQsKfeoJLMuFohXJpBrIq6RM52Uel"
setup_twitter_oauth(consumerKey,consumerSecret,accessToken,accessSecret)
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
setup_twitter_oauth(consumerKey,consumerSecret,accessToken,accessSecret)
setwd("C:/Users/pavel/Dropbox/Documents/Work and School/Teaching/MUSA - Statistics and Data Mining/Regression")
install.packages("rfacebook")
install.packages("Rfacebook")
install.packages("httpuv")
install.packages("acolorBrewer")
install.packages("RcolorBrewer")
install.packages("RCurl")
install.packages("RColorBrewer")
install.packages("rjson")
install.packages("httr")
library(Rfacebook)
library(httpuv)
library(RColorBrewer)
library(RCurl)
library(rjson)
library(httr)
myaccess_token="CAACEdEose0cBAJl34vIFxfa2gN93VtUBfRnFMMElJ76MjCuRh2jkE0iQEwjkrAmGqVDnMZASV15CB6kGIxKgZADZAtEsop4n4zpZAWlebBVQfZBQ1NSowqBlHKEPY0aVYsbHYh3xUXCpLsMCllZCUG4bvnfc4q5x3AtABTNZCI4Jp5doSKkotVJV6AUvpMsy66F2w5maiiYf2JRMPNZAnLFv"
options(RCurlOptions=list(verbose=FALSE, capath=system.file("CurlSSL,"cacert.pem", package="RCurl)))
options(RCurlOptions=list(verbose=FALSE, capath=system.file("CurlSSL,"cacert.pem", package="RCurl),ssl.verifypeer=FALSE))
options(RCurlOptions=list(verbose=FALSE, capath=system.file("CurlSSL","cacert.pem", package="RCurl),ssl.verifypeer=FALSE))
options(RCurlOptions=list(verbose=FALSE, capath=system.file("CurlSSL","cacert.pem", package="RCurl"),ssl.verifypeer=FALSE))
me <- getUsers("me", token=myaccess_token)
?getUsers
me <- getUsers("me", token=myaccess_token)
install.packages("devtools")
library(devtools)
install_github("ropensci/plotly")
install_github("ropensci/plotly")
set_config( config( ssl_verifypeer = 0L ) )
me <- getUsers("me", token=myaccess_token)
me <- getUsers("me", token=myaccess_token)
install.packages("curl")
install.packages("curl")
library(curl)
set_config( config( ssl_verifypeer = 0L ) )
myaccess_token="CAACEdEose0cBAJl34vIFxfa2gN93VtUBfRnFMMElJ76MjCuRh2jkE0iQEwjkrAmGqVDnMZASV15CB6kGIxKgZADZAtEsop4n4zpZAWlebBVQfZBQ1NSowqBlHKEPY0aVYsbHYh3xUXCpLsMCllZCUG4bvnfc4q5x3AtABTNZCI4Jp5doSKkotVJV6AUvpMsy66F2w5maiiYf2JRMPNZAnLFv"
options(RCurlOptions=list(verbose=FALSE, capath=system.file("CurlSSL","cacert.pem", package="RCurl"),ssl.verifypeer=FALSE))
me <- getUsers("me", token=myaccess_token)
me <- RCurl::getUsers("me", token=myaccess_token)
me <- curl::getUsers("me", token=myaccess_token)
library(Rfacebook)
library(httpuv)
library(RColorBrewer)
library(curl)
library(RCurl)
library(rjson)
library(httr)
library(devtools)
me <- getUsers("me", token=myaccess_token)
?curl_fetch_memory
library(devtools)
install_github("Pablobarbera/Rfacebook/Rfacebook")
require("Rfacebook")
fb_oauth <-FbOAuth(app_id="1619770638295281", app_secret="30e6a9b6e4b8a8f679f29b6a316e9911", extended_permissions = TRUE)
fb_oauth <-Fb0Auth(app_id="1619770638295281", app_secret="30e6a9b6e4b8a8f679f29b6a316e9911", extended_permissions = TRUE)
fb_oauth <-fb0Auth(app_id="1619770638295281", app_secret="30e6a9b6e4b8a8f679f29b6a316e9911", extended_permissions = TRUE)
fb_oauth <-fbOAuth(app_id="1619770638295281", app_secret="30e6a9b6e4b8a8f679f29b6a316e9911", extended_permissions = TRUE)
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
me <- curl::getUsers("me", token=myaccess_token)
me <- getUsers("me", token=myaccess_token)
?colMeans
colSD
?colSD
install.packages("matrixStats")
library(matrixStats)
?colSds
#ISLR is the package for the Hastie, Witten, James & Tibshirani textbook that
#contains the data set Hitters which we use for this example.
install.packages("ISLR")
#glmnet is the package that includes ridge and lasso regression.
install.packages("glmnet")
#matrixStats is the package that is helpful for standardizing variables
install.packages("matrixStats")
library(ISLR)
library(glmnet)
library(matrixStats)
install.packages("matrixStats")
#There are a total of 322 observations and 22 variables in the data set, as can be
#seen with the dim command.
dim(Hitters)
fix(Hitters)
#There are a total of 322 observations and 22 variables in the data set, as can be
#seen with the dim command.
dim(Hitters)
install.packages("ISLR")
#glmnet is the package that includes ridge and lasso regression.
install.packages("glmnet")
#matrixStats is the package that is helpful for standardizing variables
install.packages("matrixStats")
library(ISLR)
library(glmnet)
library(matrixStats)
fix(Hitters)
fix(ISLR::Hitters)
library(ISLR)
fix(Hitters)
head(Hitters)
install.packages("ISLR")
install.packages("ISLR")
library(ISLR)
fix(Hitters)
head(Hitters)
install.packages("ISLR")
install.packages("ISLR")
library(ISLR)
install.packages("twitteR", dependencies=T)
install.packages("Rfacebook")
install.packages("ROAuth")
#install.packages("base64enc")
install.packages("httr")
install.packages("httpuv")
install.packages("curl")
install.packages("installr")
install.packages("devtools")
#install.packages("get_oauth_sig")
library(twitteR)
library(Rfacebook)
library(ROAuth)
#library(base64enc)
library(httr)
library(httpuv)
library(curl)
library(installr)
library(devtools)
oauth_endpoints("twitter")
consumerKey <- "0cR94DC6w8UnurX6sMVJR8MIv"
consumerSecret <- "j4SJDvpRNhZ9dWhfCaR9MBq6XLxVnw04xUIvCEp7rkq2SUERNI"
accessToken <- "529074516-c88aEO4qGQ2nYuGvf4s2kp88bA9fYQkrypcF3pGL"
accessSecret <- "RLq5KnuQ34QIRLs0FQsKfeoJLMuFohXJpBrIq6RM52Uel"
setup_twitter_oauth(consumerKey,consumerSecret,accessToken,accessSecret)
R.Version()
library(RCurl)
library(RSelenium)
setwd("C:/Users/pavel/Dropbox/Documents/Work and School/Teaching/CPLN 671 - Statistics and Data Mining/Homework Assignments/Jake")
install.packages("ISLR")
install.packages("sp")
install.packages("MASS")
install.packages("spatstat")
install.packages("maptools")
install.packages("ppp")
install.packages("spatial")
install.packages("ppp")
install.packages("adehabitatHR")
install.packages("gdata")
install.packages("raster")
install.packages("rgdal")
install.packages("geostatsp")
install.packages("ppp")
library(graphics)
library(maptools)
library(spatstat)
library(sp)
library(fossil)
library(spatial)
library(adehabitatHR)
library(gdata)
library(raster)
library(rgdal)
library(geostatsp)
setwd("C:/Users/eugeneby/Dropbox/Documents/Work and School/Teaching/CPLN 671 - Statistics and Data Mining/Homework Assignments/HW 4")
#Read the boundary file
Boundary <- readShapePoly("Philadelphia.shp")
#Class "SpatialPolygons" holds polygon topology (without attributes)
BoundaryPolygons <- as(Boundary, "SpatialPolygons")
#The class "owin" is a way of specifying the observation window for a point pattern.
BoundaryPolygonsOW<- as(BoundaryPolygons, "owin")
#Plotting the Boundary Window
plot(BoundaryPolygonsOW)
title(main = "Point Pattern Analysis")
#Reading in the file with the points
Pts <- readShapePoints("Philadelphia_Farmers_Markets201302.shp")
Pts$X <- coordinates(Pts)[,1]
Pts$Y <- coordinates(Pts)[,2]
pp <- ppp(Pts$X, Pts$Y, window = BoundaryPolygonsOW)
plot(pp)
title(main = "Point Pattern Analysis")
q <- quadratcount(pp, 3,4)
plot(q)
plot(pp)
plot(pp)
plot(q)
#x is the observed number of points per quadrat
x <- matrix(as.numeric(rownames(qmatrix)))
#frequency is the number of times each observed number of points per quadrat appears
frequency <-matrix(t(qmatrix))
#Total points (i.e., how many total points are there in all quadrats with x points)
totalpoints <-x*frequency
#Observed proportion of all quadrats containing x points. Here,  12 is the number of quadrats.
obsprop <-frequency/12
#Expected proportion of all quadrats containing x points under CSR. This is simply the Poisson CMF with lambda = 62/12
expprop <- exp(-62/12)*((62/12)^x)/factorial(x)
quadrat.test(pp, 3, 4)
qmatrix <-table(q)
x <- matrix(as.numeric(rownames(qmatrix)))
#frequency is the number of times each observed number of points per quadrat appears
frequency <-matrix(t(qmatrix))
#Total points (i.e., how many total points are there in all quadrats with x points)
totalpoints <-x*frequency
#Observed proportion of all quadrats containing x points. Here,  12 is the number of quadrats.
obsprop <-frequency/11
#Expected proportion of all quadrats containing x points under CSR. This is simply the Poisson CMF with lambda = 62/12
expprop <- exp(-62/12)*((62/11)^x)/factorial(x)
#Cumulative proportions
#cumsum is a convenient command which does a cumulative (i.e., running) sums of all previous entries
obscumprop <-cumsum(obsprop)
#This is the Poisson CMF. Here, 62 is the number of points and 12 is the number of quadrats.
expcumprop <-ppois(x, lambda=(62/12))
#Absolute difference between expected and observed cumulative proportions.
cumdiff <- round(abs(expcumprop-obscumprop),4)
dataset <-cbind(x,frequency,totalpoints,obsprop,expprop,obscumprop,expcumprop,cumdiff)
ks.test(obscumprop,expcumprop)
#x is the observed number of points per quadrat
x <- matrix(as.numeric(rownames(qmatrix)))
#frequency is the number of times each observed number of points per quadrat appears
frequency <-matrix(t(qmatrix))
#Total points (i.e., how many total points are there in all quadrats with x points)
totalpoints <-x*frequency
#Observed proportion of all quadrats containing x points. Here,  12 is the number of quadrats.
obsprop <-frequency/11
#Expected proportion of all quadrats containing x points under CSR. This is simply the Poisson CMF with lambda = 62/12
expprop <- exp(-62/11)*((62/11)^x)/factorial(x)
#Cumulative proportions
#cumsum is a convenient command which does a cumulative (i.e., running) sums of all previous entries
obscumprop <-cumsum(obsprop)
#This is the Poisson CMF. Here, 62 is the number of points and 12 is the number of quadrats.
expcumprop <-ppois(x, lambda=(62/12))
#Absolute difference between expected and observed cumulative proportions.
cumdiff <- round(abs(expcumprop-obscumprop),4)
dataset <-cbind(x,frequency,totalpoints,obsprop,expprop,obscumprop,expcumprop,cumdiff)
ks.test(obscumprop,expcumprop)
#This is the Poisson CMF. Here, 62 is the number of points and 12 is the number of quadrats.
expcumprop <-ppois(x, lambda=(62/11))
#Absolute difference between expected and observed cumulative proportions.
cumdiff <- round(abs(expcumprop-obscumprop),4)
dataset <-cbind(x,frequency,totalpoints,obsprop,expprop,obscumprop,expcumprop,cumdiff)
ks.test(obscumprop,expcumprop)
x
frequency <-matrix(t(qmatrix))
frequency
dataset
#x is the observed number of points per quadrat
x <- matrix(as.numeric(rownames(qmatrix)))
#frequency is the number of times each observed number of points per quadrat appears
frequency <-matrix(t(qmatrix))
#Total points (i.e., how many total points are there in all quadrats with x points)
totalpoints <-x*frequency
#Observed proportion of all quadrats containing x points. Here,  12 is the number of quadrats.
obsprop <-frequency/11
#Expected proportion of all quadrats containing x points under CSR. This is simply the Poisson CMF with lambda = 62/12
expprop <- exp(-62/11)*((62/11)^x)/factorial(x)
#Cumulative proportions
#cumsum is a convenient command which does a cumulative (i.e., running) sums of all previous entries
obscumprop <-cumsum(obsprop)
#This is the Poisson CMF. Here, 62 is the number of points and 12 is the number of quadrats.
expcumprop <-ppois(x, lambda=(62/11))
#Absolute difference between expected and observed cumulative proportions.
cumdiff <- round(abs(expcumprop-obscumprop),4)
dataset <-cbind(x,frequency,totalpoints,obsprop,expprop,obscumprop,expcumprop,cumdiff)
ks.test(obscumprop,expcumprop)
#x is the observed number of points per quadrat
x <- matrix(as.numeric(rownames(qmatrix)))
#frequency is the number of times each observed number of points per quadrat appears
frequency <-matrix(t(qmatrix))
#Total points (i.e., how many total points are there in all quadrats with x points)
totalpoints <-x*frequency
#Observed proportion of all quadrats containing x points. Here,  12 is the number of quadrats.
obsprop <-frequency/5
#Expected proportion of all quadrats containing x points under CSR. This is simply the Poisson CMF with lambda = 62/12
expprop <- exp(-62/5)*((62/5)^x)/factorial(x)
#Cumulative proportions
#cumsum is a convenient command which does a cumulative (i.e., running) sums of all previous entries
obscumprop <-cumsum(obsprop)
#This is the Poisson CMF. Here, 62 is the number of points and 12 is the number of quadrats.
expcumprop <-ppois(x, lambda=(62/5))
#Absolute difference between expected and observed cumulative proportions.
cumdiff <- round(abs(expcumprop-obscumprop),4)
dataset <-cbind(x,frequency,totalpoints,obsprop,expprop,obscumprop,expcumprop,cumdiff)
ks.test(obscumprop,expcumprop)
